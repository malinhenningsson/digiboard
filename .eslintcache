[{"/Users/jayway/Desktop/code/digiboard-exjobb/digiboard/src/index.js":"1","/Users/jayway/Desktop/code/digiboard-exjobb/digiboard/src/App.js":"2","/Users/jayway/Desktop/code/digiboard-exjobb/digiboard/src/screens/Lobby.js":"3","/Users/jayway/Desktop/code/digiboard-exjobb/digiboard/src/screens/Room.js":"4","/Users/jayway/Desktop/code/digiboard-exjobb/digiboard/src/screens/NotFound.js":"5","/Users/jayway/Desktop/code/digiboard-exjobb/digiboard/src/contexts/PubNubContext.js":"6","/Users/jayway/Desktop/code/digiboard-exjobb/digiboard/src/components/Whiteboard.js":"7","/Users/jayway/Desktop/code/digiboard-exjobb/digiboard/src/components/Chat.js":"8","/Users/jayway/Desktop/code/digiboard-exjobb/digiboard/src/components/Canvas.js":"9","/Users/jayway/Desktop/code/digiboard-exjobb/digiboard/src/components/ToolPicker.js":"10","/Users/jayway/Desktop/code/digiboard-exjobb/digiboard/src/components/ChatPopUp.js":"11"},{"size":199,"mtime":1612868232530,"results":"12","hashOfConfig":"13"},{"size":676,"mtime":1612868232529,"results":"14","hashOfConfig":"13"},{"size":1079,"mtime":1612868232530,"results":"15","hashOfConfig":"13"},{"size":810,"mtime":1615801382371,"results":"16","hashOfConfig":"13"},{"size":153,"mtime":1612868232530,"results":"17","hashOfConfig":"13"},{"size":5069,"mtime":1612868232530,"results":"18","hashOfConfig":"13"},{"size":709,"mtime":1612868232530,"results":"19","hashOfConfig":"13"},{"size":990,"mtime":1615800642164,"results":"20","hashOfConfig":"13"},{"size":3622,"mtime":1612868232529,"results":"21","hashOfConfig":"13"},{"size":2071,"mtime":1612868232529,"results":"22","hashOfConfig":"13"},{"size":1655,"mtime":1615803438665,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},"9dvebe",{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37","usedDeprecatedRules":"26"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"42","messages":"43","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44","usedDeprecatedRules":"26"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/jayway/Desktop/code/digiboard-exjobb/digiboard/src/index.js",[],["49","50"],"/Users/jayway/Desktop/code/digiboard-exjobb/digiboard/src/App.js",[],"/Users/jayway/Desktop/code/digiboard-exjobb/digiboard/src/screens/Lobby.js",[],"/Users/jayway/Desktop/code/digiboard-exjobb/digiboard/src/screens/Room.js",[],"/Users/jayway/Desktop/code/digiboard-exjobb/digiboard/src/screens/NotFound.js",[],"/Users/jayway/Desktop/code/digiboard-exjobb/digiboard/src/contexts/PubNubContext.js",["51"],"import React, { createContext, useContext, useEffect, useState } from 'react';\nimport PubNub from 'pubnub';\n\nconst PubNubContext = createContext();\n\nconst usePubnub = () => {\n    const context = useContext(PubNubContext);\n    if (context === undefined) {\n        throw new Error('`usePubNub` hook must be used within a `PubNubContextProvider` component');\n    }\n    return context;\n}\n\nconst PubNubContextProvider = (props) => {\n    const [canvasData, setCanvasData] = useState(null);\n    const [messageData, setMessageData] = useState([]);\n\n    const newUUID = PubNub.generateUUID();\n    const pubnub = new PubNub({\n        publishKey: process.env.REACT_APP_PUBNUB_PUBLISH_KEY,\n        subscribeKey: process.env.REACT_APP_PUBNUB_SUBSCRIBE_KEY,\n        ssl: true,\n        uuid: newUUID,\n    });\n\n    const updateUserInfo = (username, roomname) => {\n        // let user = await pubnub.objects.setUUIDMetadata({\n        //     data: {\n        //         name: username\n        //     }\n        // })\n        // return user;\n        console.log('updating userinfo with: ', username, roomname)\n        pubnub.setState({\n            state: {username: username},\n            channels: [roomname]\n        }, function (status, response) {\n            if (status.isError) {\n                console.log(status);\n              }\n              else {\n                console.log(response);\n              }\n        })\n    }\n\n    const subscribeToChannel = (roomname) => {\n        pubnub.subscribe({\n            channels: [roomname],\n            withPresence: true,\n        });\n\n        pubnub.addListener({\n            status(event) {\n                if (event.category === \"PNConnectedCategory\") {\n                    console.log('connected', event);\n                }\n                if (event.operation === \"PNSubscribeOperation\") {\n                    console.log('subscribing', event.affectedChannels)\n                }\n            },\n            message(msg) {\n                if(msg) {\n                    if(msg.message) {\n                        if(msg.message.canvas) {\n                            setCanvasData(msg.message.canvas);\n                        }\n                        if(msg.message.chat) {\n                            let newMessages = [];\n                            newMessages.push({\n                                username: msg.message.chat.username,\n                                text: msg.message.chat.text,\n                                uuid: msg.publisher\n                            });\n                            setMessageData(messageData => messageData.concat(newMessages));\n                            console.log('Message data: ', msg.message.data);\n                        }\n                    }\n                }\n            },\n            presence(response) {\n                if (response.action === \"join\") {\n                    // console.log(`User ${response.uuid} joined`);\n                    pubnub.hereNow({\n                        channels: [response.channel]\n                    }, function (status, response) {\n                        console.log(response.channels[roomname].occupants)\n                        // Get occupants? response.channels[channel].occupants\n                        // need state in this to connect a username to uuid\n\n                    })\n                }\n                if (response.action === \"leave\") {\n                    // console.log(`User ${response.uuid} left`)\n                    // Need to unsubrice to room, doesnt seem to work?\n                    unsubscribeFromChannel(response.channel);\n                }\n            }\n        });\n    };\n\n    const unsubscribeFromChannel = (roomname) => {\n        pubnub.unsubscribe({\n            channels: [roomname]\n        })\n    }\n\n    const publishToChannel = (roomname, data) => {\n        const publishConfig = {\n            channel: roomname,\n            message: data\n        };\n        pubnub.publish(publishConfig, (status, response) => {\n        })\n    };\n\n    const getChannelUserData = (roomname) => {\n        pubnub.hereNow(\n            {\n                channels: [roomname], \n                channelGroups : [roomname],\n                includeUUIDs: true,\n                includeState: true \n            },\n            function (status, response) {\n                // handle status, response\n                // console.log('status: ', status);\n                // console.log('response: ', response)\n            }\n        );\n    }\n\n    // Function for retrieving history\n\n    // Unsubscribing to whiteboard and chat when leaving page\n\n    // Object with context values\n    let constextValues = {\n        usePubnub, \n        pubnub,\n        updateUserInfo,\n        subscribeToChannel,\n        unsubscribeFromChannel, \n        publishToChannel,\n        canvasData,\n        messageData,\n        getChannelUserData\n    }\n\n    return (\n        <PubNubContext.Provider value={constextValues}>\n            {props.children}\n        </PubNubContext.Provider>\n    )\n}\n\nexport { PubNubContext, usePubnub, PubNubContextProvider as default }\n","/Users/jayway/Desktop/code/digiboard-exjobb/digiboard/src/components/Whiteboard.js",[],"/Users/jayway/Desktop/code/digiboard-exjobb/digiboard/src/components/Chat.js",["52"],"/Users/jayway/Desktop/code/digiboard-exjobb/digiboard/src/components/Canvas.js",["53","54","55"],"import { useEffect, useRef, useState } from 'react';\nimport { usePubnub } from '../contexts/PubNubContext';\n\nconst Canvas = ({ parentRef, color, channelName, clearTheCanvas, setClearTheCanvas }) => {\n    const canvasRef = useRef(null);\n    const [ctx, setCtx] = useState({});\n    const [isActive, setIsActive] = useState(false);\n    const [canvasOffset, setCanvasOffset] = useState({ x: 0, y: 0 });\n    let plots = [];\n\n    // Get pubnub connections\n    const { publishToChannel, canvasData } = usePubnub();\n\n    // Set up canvas and context\n    useEffect(() => {\n        let canv = canvasRef.current;\n        canv.width = parentRef.current.offsetWidth;\n        canv.height = parentRef.current.offsetHeight;\n        \n        // Set up canvas context\n        let canvContext = canv.getContext('2d');\n        canvContext.lineJoin = \"round\";\n        canvContext.lineCap = \"round\";\n        canvContext.lineWidth = 5;\n        setCtx(canvContext);\n        \n        // Record canvas left and top offset \n        let offset = canv.getBoundingClientRect();\n        setCanvasOffset({ x: parseInt(offset.left), y: parseInt(offset.top) });\n    }, [ctx]);\n\n    // Listen to new recieved data\n    useEffect(() => {\n        if (!ctx) return;\n        if (canvasData === null || undefined) return;\n\n        if ((canvasData.positions !== undefined || null) && (canvasData.positions.length > 0)) {\n            drawFromStream(canvasData);\n        }\n        if (canvasData.clearTheCanvas) {\n            clearCanvas();\n        }\n    }, [canvasData]);\n\n    // Listen to press on clear canvas button\n    useEffect(() => {\n        if (!clearTheCanvas) return;\n        clearCanvas();\n    }, [clearTheCanvas])\n\n    // Clear canvas from strokes\n    const clearCanvas = () => {\n        ctx.clearRect(0, 0, canvasRef.current.width, canvasRef.current.height);\n\n        publishToChannel(channelName, {\n            canvas: {\n                clearTheCanvas: clearTheCanvas\n            }\n        });\n        setClearTheCanvas(false);\n    }\n\n    // Draw on canvas using other users strokes\n    const drawFromStream = (data) => {\n        if(!data || data.positions === undefined) return;\n        drawOnCanvas(data.color, data.positions);\n    }\n\n    // Draw strokes on canvas from mousemovements\n    const drawOnCanvas = (color, positions) => {\n        if (positions[0].x === undefined || null) return;\n        ctx.strokeStyle = color;\n        ctx.beginPath();\n        ctx.moveTo(positions[0].x, positions[0].y);\n\n        positions.forEach(position => {\n            ctx.lineTo(position.x, position.y)\n        })\n        ctx.stroke();\n    }\n\n    // Register mousemovements\n    const draw = (e) => {\n        e.preventDefault(); \n        if(!isActive) return;\n\n        let mousex = e.clientX - canvasOffset.x;\n        let mousey = e.clientY - canvasOffset.y;\n\n        plots.push({x: mousex, y: mousey}); \n\n        drawOnCanvas(color, plots);\n    }\n\n    // Start drawing on mouse down\n    const startDraw = (e) => {\n        e.preventDefault();\n        setIsActive(true);\n    }\n\n    // End drawing on mouse up\n    const endDraw = (e) => {\n        e.preventDefault();\n        setIsActive(false);\n\n        publishToChannel(channelName, {\n            canvas: {\n                color: color,\n                positions: plots,\n            }\n        })\n\n        plots = [];\n    }\n \n    return (\n        <div id=\"canvas-wrapper\" ref={parentRef}>\n            <canvas \n                ref={canvasRef} \n                onMouseDown={startDraw}\n                onMouseUp={endDraw}\n                onMouseMove={draw}\n            />\n        </div>\n    )\n}\n\nexport default Canvas\n","/Users/jayway/Desktop/code/digiboard-exjobb/digiboard/src/components/ToolPicker.js",[],"/Users/jayway/Desktop/code/digiboard-exjobb/digiboard/src/components/ChatPopUp.js",[],{"ruleId":"56","replacedBy":"57"},{"ruleId":"58","replacedBy":"59"},{"ruleId":"60","severity":1,"message":"61","line":1,"column":44,"nodeType":"62","messageId":"63","endLine":1,"endColumn":53},{"ruleId":"64","severity":1,"message":"65","line":15,"column":6,"nodeType":"66","endLine":15,"endColumn":8,"suggestions":"67"},{"ruleId":"64","severity":1,"message":"68","line":30,"column":8,"nodeType":"66","endLine":30,"endColumn":13,"suggestions":"69"},{"ruleId":"64","severity":1,"message":"70","line":43,"column":8,"nodeType":"66","endLine":43,"endColumn":20,"suggestions":"71"},{"ruleId":"64","severity":1,"message":"72","line":49,"column":8,"nodeType":"66","endLine":49,"endColumn":24,"suggestions":"73"},"no-native-reassign",["74"],"no-negated-in-lhs",["75"],"no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'channelName', 'getChannelUserData', and 'username'. Either include them or remove the dependency array. If 'setOwnUsername' needs the current value of 'username', you can also switch to useReducer instead of useState and read 'username' in the reducer.","ArrayExpression",["76"],"React Hook useEffect has a missing dependency: 'parentRef'. Either include it or remove the dependency array.",["77"],"React Hook useEffect has missing dependencies: 'clearCanvas', 'ctx', and 'drawFromStream'. Either include them or remove the dependency array.",["78"],"React Hook useEffect has a missing dependency: 'clearCanvas'. Either include it or remove the dependency array.",["79"],"no-global-assign","no-unsafe-negation",{"desc":"80","fix":"81"},{"desc":"82","fix":"83"},{"desc":"84","fix":"85"},{"desc":"86","fix":"87"},"Update the dependencies array to be: [channelName, getChannelUserData, username]",{"range":"88","text":"89"},"Update the dependencies array to be: [ctx, parentRef]",{"range":"90","text":"91"},"Update the dependencies array to be: [canvasData, clearCanvas, ctx, drawFromStream]",{"range":"92","text":"93"},"Update the dependencies array to be: [clearCanvas, clearTheCanvas]",{"range":"94","text":"95"},[574,576],"[channelName, getChannelUserData, username]",[1135,1140],"[ctx, parentRef]",[1514,1526],"[canvasData, clearCanvas, ctx, drawFromStream]",[1665,1681],"[clearCanvas, clearTheCanvas]"]